#!/usr/bin/env groovy

node {
    checkout scm
    def joblib = load("build.groovy")
    def commonlib = joblib.commonlib
    def slacklib = commonlib.slacklib

    commonlib.describeJob("ocp4", """
        <h2>Build OCP 4.y components incrementally</h2>
        <b>Timing</b>: Usually run automatically from merge_ocp.
        Humans may run as needed. Locks prevent conflicts.

        In typical usage, scans for changes that could affect package or image
        builds and rebuilds the affected components.  Creates new plashets if
        the automation is not frozen or if there are RPMs that are built in this run,
        and runs other jobs to sync builds to nightlies, create
        operator metadata, and sets MODIFIED bugs to ON_QA.

        May also build unconditionally or with limited components.
    """)


    // Expose properties for a parameterized build
    properties(
        [
            disableResume(),
            buildDiscarder(
                logRotator(
                    artifactDaysToKeepStr: '30',
                    daysToKeepStr: '30')),
            [
                $class: 'ParametersDefinitionProperty',
                parameterDefinitions: [
                    commonlib.dryrunParam(),
                    commonlib.mockParam(),
                    commonlib.doozerParam(),
                    commonlib.ocpVersionParam('BUILD_VERSION', '4'),
                    string(
                        name: 'NEW_VERSION',
                        description: '(Optional) version for build instead of most recent\nor "+" to bump most recent version',
                        defaultValue: "",
                        trim: true,
                    ),
                    string(
                        name: 'ASSEMBLY',
                        description: 'The name of an assembly to rebase & build for. If assemblies are not enabled in group.yml, this parameter will be ignored',
                        defaultValue: "stream",
                        trim: true,
                    ),
                    string(
                        name: 'DOOZER_DATA_PATH',
                        description: 'ocp-build-data fork to use (e.g. test customizations on your own fork)',
                        defaultValue: "https://github.com/openshift-eng/ocp-build-data",
                        trim: true,
                    ),
                    booleanParam(
                        name: 'FORCE_BUILD',
                        description: 'Build regardless of whether source has changed',
                        defaultValue: false,
                    ),
                    choice(
                        name: 'BUILD_RPMS',
                        description: 'Which RPMs are candidates for building? "only/except" refer to list below',
                        choices: [
                            "all",
                            "only",
                            "except",
                            "none",
                        ].join("\n"),
                    ),
                    string(
                        name: 'RPM_LIST',
                        description: '(Optional) Comma/space-separated list to include/exclude per BUILD_RPMS (e.g. openshift,openshift-kuryr)',
                        defaultValue: "",
                        trim: true,
                    ),
                    choice(
                        name: 'BUILD_IMAGES',
                        description: 'Which images are candidates for building? "only/except" refer to list below',
                        choices: [
                            "all",
                            "only",
                            "except",
                            "none",
                        ].join("\n"),
                    ),
                    string(
                        name: 'IMAGE_LIST',
                        description: '(Optional) Comma/space-separated list to include/exclude per BUILD_IMAGES (e.g. logging-kibana5,openshift-jenkins-2)',
                        defaultValue: "",
                        trim: true,
                    ),
                    commonlib.suppressEmailParam(),
                    string(
                        name: 'MAIL_LIST_SUCCESS',
                        description: '(Optional) Success Mailing List\naos-cicd@redhat.com,aos-qe@redhat.com',
                        defaultValue: "",
                        trim: true,
                    ),
                    string(
                        name: 'MAIL_LIST_FAILURE',
                        description: 'Failure Mailing List',
                        defaultValue: [
                            'aos-art-automation+failed-ocp4-build@redhat.com'
                        ].join(','),
                        trim: true
                    ),
                    string(
                        name: 'SPECIAL_NOTES',
                        description: '(Optional) special notes to include in the build email',
                        defaultValue: "",
                        trim: true,
                    ),
                ]
            ],
        ]
    )

    commonlib.checkMock()

    if (currentBuild.description == null) {
        currentBuild.description = ""
    }

    try {

        sshagent(["openshift-bot"]) {

            lock("github-activity-lock-${params.BUILD_VERSION}") {
                stage("initialize") {
                    currentBuild.displayName = "#${currentBuild.number}"
                    doozerWorking = "${env.WORKSPACE}/doozer_working"
                    doozerOpts = "--working-dir ${doozerWorking} --data-path ${params.DOOZER_DATA_PATH}"
                    buildlib.cleanWorkdir(doozerWorking)
                }

                stage("ocp4") {
                    sh "rm -rf ./artcd_working && mkdir -p ./artcd_working"

                    def cmd = [
                        "artcd",
                        "-v",
                        "--working-dir=./artcd_working",
                        "--config=./config/artcd.toml",
                        "ocp4",
                        "--version=${params.BUILD_VERSION}",
                        "--assembly=${params.ASSEMBLY}",
                    ]
                    if (params.DOOZER_DATA_PATH) {
                        cmd << "--data-path=${params.DOOZER_DATA_PATH}"
                    }
                    if (params.FORCE_BUILD) {
                        cmd << "--force"
                    }
                    cmd += [
                        "--build-rpms=${params.BUILD_RPMS}",
                        "--rpm-list=${params.RPM_LIST}",
                        "--build-images=${params.BUILD_IMAGES}",
                        "--image-list=${params.IMAGE_LIST}"
                    ]

                    wrap([$class: 'BuildUser']) {
                            builderEmail = env.BUILD_USER_EMAIL
                        }

                    buildlib.withAppCiAsArtPublish() {
                        withCredentials([
                                    string(credentialsId: 'jenkins-service-account', variable: 'JENKINS_SERVICE_ACCOUNT'),
                                    string(credentialsId: 'jenkins-service-account-token', variable: 'JENKINS_SERVICE_ACCOUNT_TOKEN'),
                                    string(credentialsId: 'redis-server-password', variable: 'REDIS_SERVER_PASSWORD'),
                                    string(credentialsId: 'redis-host', variable: 'REDIS_HOST'),
                                    string(credentialsId: 'redis-port', variable: 'REDIS_PORT'),
                                    string(credentialsId: 'gitlab-ocp-release-schedule-schedule', variable: 'GITLAB_TOKEN')
                                ]) {
                            withEnv(["BUILD_USER_EMAIL=${builderEmail?: ''}", "BUILD_URL=${BUILD_URL}", "JOB_NAME=${JOB_NAME}"]) {
                                sh(script: cmd.join(' '), returnStdout: true)
                            }
                        }
                    }

                    error('manually breaking the build')
                }

                stage("build images") {
                    withCredentials([string(credentialsId: 'openshift-bot-token', variable: 'GITHUB_TOKEN')]) {
                            joblib.stageBuildImages()
                    }
                }
            }
            stage("sync images") {
                if (buildlib.allImagebuildfailed) { return }
                joblib.stageSyncImages()
            }
            stage("mirror RPMs") {
                sh "rm -rf ./artcd_working && mkdir -p ./artcd_working"

                // Create artcd command
                def cmd = [
                    "artcd",
                    "-v",
                    "--working-dir=./artcd_working",
                    "--config=./config/artcd.toml",
                ]
                if (params.DRY_RUN) {
                    cmd << "--dry-run"
                }
                localPlashetPath = rpmMirror.localPlashetPath ? rpmMirror.localPlashetPath : ''
                cmd += [
                    "ocp4:mirror-rpms",
                    "--version=${version.stream}",
                    "--assembly=${params.ASSEMBLY}",
                    "--local-plashet-path=${localPlashetPath}"
                ]
                withCredentials([
                            aws(credentialsId: 's3-art-srv-enterprise', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'),
                            string(credentialsId: 'redis-server-password', variable: 'REDIS_SERVER_PASSWORD'),
                            string(credentialsId: 'redis-host', variable: 'REDIS_HOST'),
                            string(credentialsId: 'redis-port', variable: 'REDIS_PORT'),
                            string(credentialsId: 'art-bot-slack-token', variable: 'SLACK_BOT_TOKEN')
                        ]) {
                    retry(3) {
                        timeout(time: 60, unit: 'MINUTES') { // aws s3 sync has been observed to hang before
                            sh(script: cmd.join(' '), returnStdout: true)
                        }
                    }
                }
            }

            stage("sweep") {
                if (buildlib.allImagebuildfailed) { return }

                cmd = [
                    "artcd",
                    "-v",
                    "--working-dir=./artcd_working",
                    "--config=./config/artcd.toml",
                ]
                if (params.DRY_RUN) {
                    cmd << "--dry-run"
                }
                cmd += [
                    "ocp4:sweep",
                    "--version=${version.stream}"
                ]

                try {
                    withCredentials([string(credentialsId: 'jboss-jira-token', variable: 'JIRA_TOKEN')]) {
                        sh(script: cmd.join(' '), returnStdout: true)
                    }
                } catch (err) {
                    currentBuild.result = 'UNSTABLE'
                    if (dry_run) {
                        return
                    }
                    commonlib.email(
                        replyTo: 'aos-team-art@redhat.com',
                        to: 'aos-art-automation+failed-sweep@redhat.com',
                        from: 'aos-art-automation@redhat.com',
                        subject: "Problem sweeping after ${currentBuild.displayName}",
                        body: "Jenkins console: ${commonlib.buildURL('console')}",
                    )
                }
            }
        }

        stage("report success") { joblib.stageReportSuccess() }

    } catch (err) {
        if (params.MAIL_LIST_FAILURE.trim()) {
            commonlib.email(
                to: params.MAIL_LIST_FAILURE,
                from: "aos-team-art@redhat.com",
                subject: "Error building OCP ${params.BUILD_VERSION}",
                body:
"""\
Pipeline build "${currentBuild.displayName}" encountered an error:
${currentBuild.description}


View the build artifacts and console output on Jenkins:
    - Jenkins job: ${commonlib.buildURL()}
    - Console output: ${commonlib.buildURL('console')}

"""

            )
        }
        currentBuild.description += "<hr />${err}"
        currentBuild.result = "FAILURE"
        throw err  // gets us a stack trace FWIW
    } finally {
        commonlib.compressBrewLogs()
        commonlib.safeArchiveArtifacts([
            "doozer_working/*.log",
            "doozer_working/brew-logs.tar.bz2",
            "doozer_working/*.yaml",
            "doozer_working/*.yml",
        ])
        buildlib.cleanWorkdir(joblib.doozerWorking)
        buildlib.cleanWorkspace()
    }
}
